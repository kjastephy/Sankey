{
  $schema: https://vega.github.io/schema/vega/v5.0.json
  data: [
    {
      name: rawData
      url: {
        index: *put_your_index_here*
        %context%: true
        %timefield%: DEBUT_APPEL
        body: {
          aggs: {
            source: {
              terms: {
                field: stack1
              }
              aggs: {
                destination: {
                  terms: {
                    field: stack2
                  }
                }
              }
            }
          }
        }
        size: 0
      }
      format: {
        property: aggregations.source.buckets
      }
      // Filtre sur le résultat obtenu pour considérer que les données qui m'intéressent
      transform: [
        {
          type: flatten
          fields: [
            destination.buckets
          ]
          as: [
            flat
          ]
        }
        {
          type: formula
          expr: datum.key
          as: stk1
        }
        {
          type: formula
          expr: datum.flat.key
          as: stk2
        }
        {
          type: formula
          expr: datum.flat.doc_count
          as: size
        }
      ]
    }
    {
      name: nodes
      source: rawData
      // lorqu'un noeud  (ex:pays) est selectionné, filtrer sur les
      // données non liées
      transform: [
        {
          type: filter
          expr: !groupSelector || groupSelector.stk1 == datum.stk1 || groupSelector.stk2 == datum.stk2
        }
        // je définis une nouvelle clé pour les recherches ultérieures et  l'identification de chaque nœud (source+destination)
        {
          type: formula
          expr: datum.stk1+datum.stk2
          as: key
        }
        //repartition des données en piles et groupes
        {
          type: fold
          fields: [
            stk1
            stk2
          ]
          as: [
            stack
            grpId
          ]
        }
         //Création de clés de tri différentes pour src et dest 
        //ajouter un séparateur d'espace pour un ordre de tri correct
        {
          type: formula
          expr: datum.stack == 'stk1' ? datum.stk1+datum.stk2 : datum.stk2+datum.stk1
          as: sortField
        }
        //Calcul des positions y0 et y1 pour empiler les noeuds les uns
        //sur les autres, indépendamment pour chaque pile selon l'ordre
        //alphabétique à partir du haut
        {
          type: stack
          groupby: [
            stack
          ]
          sort: {
            field: sortField
            order: descending
          }
          field: size
        }
        //calcul du point central vertical pour chaque noeud ( necessaire pour dessiner les noeuds)
        {
          type: formula
          expr: (datum.y0+datum.y1)/2
          as: yc
        }
      ]
    }
    {
      name: groups
      source: nodes
          // Combiner tous les noeuds en gropues, avec le nbCdr associés
      transform: [
        {
          type: aggregate
          groupby: [
            stack
            grpId
          ]
          fields: [
            size
          ]
          ops: [
            sum
          ]
          as: [
            total
          ]
        }
        // recalcul les valeurs de y0 et y1
        {
          type: stack
          groupby: [
            stack
          ]
          sort: {
            field: grpId
            order: descending
          }
          field: total
        }
        //projection des valeurs de y0 et y1 sur les coordonnées de
        // l'écran. on peut le faire dans les marques aussi
        {
          type: formula
          expr: scale('y', datum.y0)
          as: scaledY0
        }
        // j'affiche le label de la pile src à sa droite
        {
          type: formula
          expr: scale('y', datum.y1)
          as: scaledY1
        }
        //Calcul du  pourcentage de traffic pour la src en utilisant
        //l'échelle y qui est la limite supérieure, répresentant le
        //trafic total
        {
          type: formula
          expr: datum.stack == 'stk1'
          as: rightLabel
        }
        {
          type: formula
          expr: datum.total/domain('y')[1]
          as: percentage
        }
      ]
    }
    {
      name: destinationNodes
      source: nodes
      //Création d'une table de recherche contenant tous les noeuds dest
      transform: [
        {
          type: filter
          expr: datum.stack == 'stk2'
        }
      ]
    }
    {
      name: edges
      source: nodes
      // je veux que les noeuds de pile src
      transform: [
        {
          type: filter
          expr: datum.stack == 'stk1'
        }
        {
          type: lookup
          from: destinationNodes
          key: key
          fields: [
            key
          ]
          as: [
            target
          ]
        }
        //Calcul du lien svg entre les points Y0,Y1 pour (src+dest)
        {
          type: linkpath
          orient: horizontal
          shape: diagonal
          sourceY: {
            expr: scale('y', datum.yc)
          }
          sourceX: {
            expr: scale('x', 'stk1') + bandwidth('x')
          }
          targetY: {
            expr: scale('y', datum.target.yc)
          }
          targetX: {
            expr: scale('x', 'stk2')
          }
        }
        // calcul de l'épaisseur des liens entre src et dest:
        // La valeur doit être la même que la hauteur du nœud, mais
        //   mise à l'échelle
        // la taille à la hauteur de l'écran donne une valeur inversée car le Y du graphique est inversé
        // les coordonnées vont du haut vers le bas, alors que le Y=0
        // du graphique est en bas. Donc, en soustrayant le nbCdr à
        // l'échelle de la hauteur de l'écran (qui est la borne inf
        // de l'échelle "y") j'obtiens la bonne valeur de l'épaisseur
        {
          type: formula
          expr: range('y')[0]-scale('y', datum.size)
          as: strokeWidth
        }
        // Calcul du % de lien individuel pour l'info-bulle sur tout le trafic
        {
          type: formula
          expr: datum.size/domain('y')[1]
          as: percentage
        }
      ]
    }
  ]
  scales: [
  //Calcul du positionnement horizontal de la pile (x)
    {
      name: x
      type: band
      range: width
      domain: [
        stk1
        stk2
      ]
      paddingOuter: 0.05
      paddingInner: 0.95
    }
     // ajustement de l'échelle à la valeur Y1 la plus grande des noeuds
    {
      name: y
      type: linear
      range: height
      domain: {
        data: nodes
        field: y1
      }
    }
     // utilisation du jeu de données pour s'assurer que les couleurs 
    // restent les mêmes lors d'un clic
    {
      name: color
      type: ordinal
      range: category
      domain: {
        data: rawData
        fields: [
          stk1
          stk2
        ]
      }
    }
    // mapping des id internes src et dest aux noms de pile
    {
      name: stackNames
      type: ordinal
      range: [
        Source
        Destination
      ]
      domain: [
        stk1
        stk2
      ]
    }
  ]
  axes: [
  // l'axe X doit utiliser un format de label personnalisé (ex: en bas 
  // et à gauche) pour  afficher les noms de pile appropriés
    {
      orient: bottom
      scale: x
      encode: {
        labels: {
          update: {
            text: {
              scale: stackNames
              field: value
            }
          }
        }
      }
    }
    {
      orient: left
      scale: y
    }
  ]
  marks: [
  // gestion des bordures des noeuds
    {
      type: rect
      from: {
        data: nodes
      }
      encode: {
        enter: {
          stroke: {
            value: "#000"
          }
          strokeWidth: {
            value: 1
          }
          width: {
            scale: x
            band: 1
          }
          x: {
            scale: x
            field: stack
          }
          y: {
            field: y0
            scale: y
          }
          y2: {
            field: y1
            scale: y
          }
        }
      }
    }
   // je dessine le chemin (lien) entre la src et la dest
    {
      type: path
      name: edgeMark
      from: {
        data: edges
      }
      // cela évite certains problèmes de dimensionnement automatique
      // lors d'une grande épaisseur pour les chemins
      clip: true
      encode: {
        update: {
        // Par défaut, j'utilise la couleur du nœud de gauche, sauf
        // lors de l'affichage du trafic d'une seule destination,
        // auquel cas utiliser la couleur du noeud de droite
          stroke: [
            {
              test: groupSelector && groupSelector.stack=='stk1'
              scale: color
              field: stk2
            }
            {
              scale: color
              field: stk1
            }
          ]
          strokeWidth: {
            field: strokeWidth
          }
          path: {
            field: path
          }
        // lors de l'affichage de tout le trafic et du survol d'une src
        // je met en évidence le trafic provenant de cette src.
          strokeOpacity: {
            signal: !groupSelector && (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 0.9 : 0.3
          }
        // j'affiche le lien selectionné au survol au dessus des autres
          zindex: {
            signal: !groupSelector && (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 1 : 0
          }
          // formatage du texte de l'info-bulle au survol
          tooltip: {
            signal: datum.stk1 + ' → ' + datum.stk2 + '    ' + format(datum.size, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'
          }
        }
        // ajout d'un surlignement simple au survol d'un seul lien
        hover: {
          strokeOpacity: {
            value: 1
          }
        }
      }
    }
    // je dessine les groupes de piles
    {
      type: rect
      name: groupMark
      from: {
        data: groups
      }
      encode: {
        enter: {
          fill: {
            scale: color
            field: grpId
          }
          width: {
            scale: x
            band: 1
          }
        }
        update: {
          x: {
            scale: x
            field: stack
          }
          y: {
            field: scaledY0
          }
          y2: {
            field: scaledY1
          }
          fillOpacity: {
            value: 0.6
          }
          tooltip: {
            signal: datum.grpId + '   ' + format(datum.total, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'
          }
        }
        hover: {
          fillOpacity: {
            value: 1
          }
        }
      }
    }
    // je dessine les labels des noeuds sur le côté intérieur des piles
    {
      type: text
      from: {
        data: groups
      }
      interactive: false
      encode: {
        update: {
         // En fonction de la pile dont il s'agit, je positionne x avec
        // un peu de rembourrage
          x: {
            signal: scale('x', datum.stack) + (datum.rightLabel ? bandwidth('x') + 8 : -8)
          }
          yc: {
            signal: (datum.scaledY0 + datum.scaledY1)/2
          }
          align: {
            signal: datum.rightLabel ? 'left' : 'right'
          }
          //affichage du label au niveau du milieu du groupe
          baseline: {
            value: middle
          }
          fontWeight: {
            value: bold
          }
          text: {
            signal: abs(datum.scaledY0-datum.scaledY1) > 13 ? datum.grpId : ''
          }
        }
      }
    }
    // Crée un bouton "". S'affiche uniquement lorsqu'un pays est sélectionné.
    {
      type: group
      data: [
        {
          name: dataForShowAll
          values: [
            {
            }
          ]
          transform: [
            {
              type: filter
              expr: groupSelector
            }
          ]
        }
      ]
      // Définir la taille et le positionnement du bouton
      encode: {
        enter: {
          xc: {
            signal: width/2
          }
          y: {
            value: 30
          }
          width: {
            value: 80
          }
          height: {
            value: 30
          }
        }
      }
      marks: [
      // Ce groupe est affiché sous la forme d'un bouton aux coins
        {
          type: group
          name: groupReset
          // N'affiche le bouton que si #button_name a des valeurs.
          from: {
            data: dataForShowAll
          }
          encode: {
            enter: {
              cornerRadius: {
                value: 6
              }
              fill: {
                value: "#f5f5f5"
              }
              stroke: {
                value: "#c1c1c1"
              }
              strokeWidth: {
                value: 2
              }
              // utilise la taille du groupe parent
              height: {
                field: {
                  group: height
                }
              }
              // utilise la largeur du groupe parent
              width: {
                field: {
                  group: width
                }
              } 
            }
            // les groupes seront transparents par défaut
            update: {
              opacity: {
                value: 1
              }
            }
            hover: {
              opacity: {
                value: 0.7
              }
            }
          }
          marks: [
            {
              type: text
               // si vrai, cela empêchera de cliquer sur le bouton
            // lorsqu'il est sur du texte.
              interactive: false
              encode: {
                enter: {
                // je centre le texte dans le groupe parent
                  xc: {
                    field: {
                      group: width
                    }
                    mult: 0.5
                  }
                  yc: {
                    field: {
                      group: height
                    }
                    mult: 0.5
                    offset: 2
                  }
                  align: {
                    value: center
                  }
                  baseline: {
                    value: middle
                  }
                  fontWeight: {
                    value: bold
                  }
                  text: {
                    value: Show All
                  }
                }
              }
            }
          ]
        }
      ]
    }
  ]
  //mettre en évidence le trafic vers/depuis la même source lors d'un survol
  signals: [
    {
      name: groupHover
      value: {
      }
      on: [
        {
          events: @groupMark:mouseover
          update: "{stk1:datum.stack=='stk1' && datum.grpId, stk2:datum.stack=='stk2' && datum.grpId}"
        }
        {
          events: mouseout
          update: "{}"
        }
      ]
    }
    // permet de filtrer uniquement les données relatives à la source
     // sélectionné
    {
      name: groupSelector
      value: false
      on: [
      // Cliquer sur groupMark définit ce signal sur les valeurs du 
      // filtre
        {
          events: @groupMark:click!
          update: "{stack:datum.stack, stk1:datum.stack=='stk1' && datum.grpId, stk2:datum.stack=='stk2' && datum.grpId}"
        }
        // Cliquer sur le bouton  ou double-cliquer n'importe où va 
        // permettre de réinitialiser la visualition
        {
          events: [
            {
              type: click
              markname: groupReset
            }
            {
              type: dblclick
            }
          ]
          update: "false"
        }
      ]
    }
  ]
}
