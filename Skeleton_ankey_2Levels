{
  $schema: https://vega.github.io/schema/vega/v5.0.json
  data: [
    {
      name: 
      url: {
        index: 
        %context%: 
        %timefield%: 
        body: {
          aggs: {
            source: {
              terms: {
                field: 
              }
              aggs: {
                destination: {
                  terms: {
                    field: 
                  }
                }
              }
            }
          }
        }
        size: 0
      }
      
      format: {
        property: 
      }
      // Filtre sur le résultat obtenu pour considérer que les données qui m'intéressent
      transform: [
               {
          type: formula
          expr: 
          as: 
        }
        {
          type: formula
          expr: 
          as: 
        }
        {
          type: formula
          expr: 
          as: 
        }
      ]
    }
    
    {
      name: 
      source: 
      // lorqu'un noeud  (ex:pays) est selectionné, filtrer sur les
      // données non liées
      transform: [
       
        {
          type: filter
          expr: !groupSelector || 
        }
        // je définis une nouvelle clé pour les recherches ultérieures et  l'identification de chaque nœud (source+destination)
        {
          type: formula
          expr: 
          as: 
        }
        //repartition des données en piles et groupes
        {
          type: fold
          fields: [
            src
            dest
          ]
          as: [
           
           
          ]
        }
        //Création de clés de tri différentes pour src et dest 
        //ajouter un séparateur d'espace pour un ordre de tri correct
        
        {
          type: formula
          expr: 
          as: 
        }
        //Calcul des positions y0 et y1 pour empiler les noeuds les uns
        //sur les autres, indépendamment pour chaque pile selon l'ordre
        //alphabétique à partir du haut
        {
          type: 
          groupby: [
            
          ]
          sort: {
            field: 
            order: descending
          }
          field: 
        }
        //calcul du point central vertical pour chaque noeud ( necessaire pour dessiner les noeuds)
        {
          type: formula
          expr: 
          as: 
        }
      ]
    }
    {
      name: groups
      source: 
      // Combiner tous les noeuds en gropues, avec le nbCdr associés
      transform: [
        {
          type: aggregate
          groupby: [
            
          ]
          fields: [
            
          ]
          ops: [
            sum
          ]
          as: [
            
          ]
        }
        // recalcul les valeurs de y0 et y1
        {
          type: stack
          groupby: [
            
          ]
          sort: {
            field: 
            order: descending
          }
          field: 
        }
        //projection des valeurs de y0 et y1 sur les coordonnées de
        // l'écran. on peut le faire dans les marques aussi
        {
          type: formula
          expr: scale('y', datum.y0)
          as: 
        }
        {
          type: formula
          expr: scale('y', datum.y1)
          as: 
        }
        // j'affiche le label de la pile src à sa droite 
        {
          type: formula
          expr: datum.stack == 'stk1'
          as: rightLabel
        }
        //Calcul du  pourcentage de traffic pour la src en utilisant
        //l'échelle y qui est la limite supérieure, répresentant le
        //trafic total
        {
          type: formula
          expr:
          as: 
        }
      ]
    }
    {
      name: 
      source: 
    //Création d'une table de recherche contenant tous les noeuds dest
      transform: [
        {
          type: filter
          expr: datum.stack == ''
        }
      ]
    }
    {
      name: edges
      source: 
       // je veux que les noeuds de pile src
      transform: [
        {
          type: filter
          expr: datum.stack == ''
        }
        {
          type: lookup
          from: 
          key: key
          fields: [
            
          ]
          as: [
            
          ]
        }
        //Calcul du lien svg entre les points Y0,Y1 pour (src+dest)
        {
          type: linkpath
          orient: horizontal
          shape: diagonal
          sourceY: {
            expr: scale('', datum.)
          }
          sourceX: {
            expr: scale('', '') + bandwidth('')
          }
          targetY: {
            expr: scale('', datum.)
          }
          targetX: {
            expr: scale('', '')
          }
        }
        // calcul de l'épaisseur des liens entre src et dest:
        // La valeur doit être la même que la hauteur du nœud, mais
        //   mise à l'échelle
        // la taille à la hauteur de l'écran donne une valeur inversée car le Y du graphique est inversé
        // les coordonnées vont du haut vers le bas, alors que le Y=0
        // du graphique est en bas. Donc, en soustrayant le nbCdr à
        // l'échelle de la hauteur de l'écran (qui est la borne inf
        // de l'échelle "y") j'obtiens la bonne valeur de l'épaisseur
        {
          type: formula
          expr: range('')[0]-scale('', datum.)
          as: 
        }
        // Calcul du % de lien individuel pour l'info-bulle sur tout le trafic
        {
          type: formula
          expr: datum./domain('')[]
          as: 
        }
      ]
    }
  ]
  scales: [
  //Calcul du positionnement horizontal de la pile (x)
    {
      name: 
      type: band
      range: 
      domain: [
        
      ]
      paddingOuter: 0.06
      paddingInner: 0.99
    }
    // ajustement de l'échelle à la valeur Y1 la plus grande des noeuds
    {
      name: 
      type: linear
      range: 
      domain: {
        data: 
        field: 
      }
    }
    // utilisation du jeu de données ppours'assurer que les couleurs 
    // restent les mêmes lors d'un clic
    {
      name: 
      type: ordinal
      range: category
      domain: {
        data: 
        fields: [
         
        ]
      }
    }
    // mapping des id internes src et dest aux noms de pile
    {
      name: 
      type: ordinal
      range: [
        
      ]
      domain: [
       
      ]
    }
  ]
  axes: [
  // l'axe X doit utiliser un format de label personnalisé (ex: en bas 
  // et à gauche) pour  afficher les noms de pile appropriés
    {
      orient: 
      scale: 
      encode: {
        labels: {
          update: {
            text: {
              scale: 
              field: 
            }
          }
        }
      }
    }
    {
      orient: 
      scale: 
    }
  ]
  marks: [
  // gestion des bordures des noeuds
    {
      type: 
      from: {
        data: 
      }
      encode: {
        enter: {
          stroke: {
            value: ""
          }
          strokeWidth: {
            value: 1
          }
          width: {
            scale: 
            band: 
          }
          x: {
            scale: 
            field: 
          }
          y: {
            field: 
            scale:
          }
          y2: {
            field: 
            scale: 
          }
        }
      }
    }
    // je dessine le chemin (lien) entre la src et la dest
    {
      type: 
      name: 
      from: {
        data: 
      }
      // cela évite certains problèmes de dimensionnement automatique
      // lors d'une grande épaisseur pour les chemins
      clip: true
      encode: {
        update: {
        // Par défaut, j'utilise la couleur du nœud de gauche, sauf
        // lors de l'affichage du trafic d'une seule destination,
        // auquel cas utiliser la couleur du noeud de droite
          stroke: [
            {
              test: groupSelector && groupSelector.==''
              scale: color
              field: 
            }
            {
              scale: color
              field: 
            }
          ]
          strokeWidth: {
            field: 
          }
          path: {
            field: 
          }
        // lors de l'affichage de tout le trafic et du survol d'une src
        // je met en évidence le trafic provenant de cette src.
          strokeOpacity: {
            signal: !groupSelector && (groupHover. == datum. || groupHover. == datum.) ? 0.9 : 0.3
          }
        // j'affiche le lien selectionné au survol au dessus des autres
          zindex: {
            signal: !groupSelector && (groupHover. == datum. || groupHover. == datum.) ? 1 : 0
          }
          // formatage du texte de l'info-bulle au survol
          tooltip: {
            signal: datum. + ' → ' + datum. + '    ' + format(datum., ',.0f') + '   (' + format(datum., '.1%') + ')'
          }
        }
        // ajout d'un surlignement simple au survol d'un seul lien
        hover: {
          strokeOpacity: {
            value: 
          }
        }
      }
    }
    // je dessine les groupes de piles
    {
      type: 
      name: 
      from: {
        data: 
      }
      encode: {
        enter: {
          fill: {
            scale: 
            field: 
          }
          width: {
            scale: 
            band: 
          }
        }
        update: {
          x: {
            scale: 
            field: stack
          }
          y: {
            field: scaledY0
          }
          y2: {
            field: scaledY1
          }
          fillOpacity: {
            value: 0.6
          }
          tooltip: {
            signal: datum. + '   ' + format(datum., ',.0f') + '   (' + format(datum., '.1%') + ')'
          }
        }
        hover: {
          fillOpacity: {
            value: 
          }
        }
      }
    }
    // je dessine les labels des noeuds sur le côté intérieur des piles
    {
      type: 
      from: {
        data: 
      }
      // j'ignore les évenements des labels sinon le survol des liens 
      // sera surchargé
      interactive: false
      encode: {
        update: {
        // En fonction de la pile dont il s'agit, je positionne x avec
        // un peu de rembourrage
          x: {
            signal: scale('', datum.) + (datum. ? bandwidth('') + 8 : -8)
          }
          // Milieu du groupe
          yc: {
            signal: (datum. + datum.)/2
          }
          align: {
            signal: datum. ? 'left' : 'right'
          }
          //afiichage du label au niveau du milieu du groupe
          baseline: {
            value: 
          }
          fontWeight: {
            value: 
          }
          // j'affiche le label de texte que si la hauteur du groupe
          // est suffisamment grande
          text: {
            signal: (datum.-datum.) >  ? datum. : ''
          }
        }
      }
    }
          // Crée un bouton "". S'affiche uniquement lorsqu'un pays est sélectionné.
    {
      type: 
      data: [
        {
          name: 
          values: [
            {
            }
          ]
          transform: [
            {
              type: filter
              expr: 
            }
          ]
        }
      ]
       // Définir la taille et le positionnement du bouton
      encode: {
        enter: {
          xc: {
            signal: width/2
          }
          y: {
            value: 
          }
          width: {
            value: 
          }
          height: {
            value: 
          }
        }
      }
       // j'ajoute des proprietés au bouton 
      marks: [
        {
        // Ce groupe est affiché sous la forme d'un bouton aux coins arrondis.
          type: group
          //Nb: le nom de la marque permet la capture du signal
          name: 
          // N'affiche le bouton que si #button_name a des valeurs.
          from: {
            data: 
          }
          encode: {
            enter: {
              cornerRadius: {
                value: 6
              }
              fill: {
                value: ""
              }
              stroke: {
                value: ""
              }
              strokeWidth: {
                value: 
              }
              // utilise la taille du groupe parent
              height: {
                field: {
                  group: 
                }
              }
             // utilise la largeur du groupe parent
              width: {
                field: {
                  group: 
                }
              } 
            }
            update: {
            // les groupes seront transparents par défaut
              opacity: {
                value: 
              }
            }
            hover: {
              opacity: {
                value: 
              }
            }
          }
          marks: [
            {
              type: text
            // si vrai, cela empêchera de cliquer sur le bouton
            // lorsqu'il est sur du texte.
              interactive: 
              encode: {
                enter: {
                // je centre le texte dans le groupe parent
                  xc: {
                    field: {
                      group: 
                    }
                    mult: 0.5
                  }
                  yc: {
                    field: {
                      group: 
                    }
                    mult: 0.5
                    offset: 2
                  }
                  align: {
                    value: 
                  }
                  baseline: {
                    value: 
                  }
                  fontWeight: {
                    value: 
                  }
                  text: {
                    value: 
                  }
                }
              }
            }
          ]
        }
      ]
    }
  ]
  //mettre en évidence le trafic vers/depuis la même source lors d'un survol
  signals: [
    {
      name: 
      value: {
      }
      on: [
        {
          events: @groupMark:
          update: "{:datum.=='stk1' && datum., :datum.stack=='' && datum.}"
        }
        {
          events: 
          update: "{}"
        }
      ]
    }
     // permet de filtrer uniquement les données relatives à la source
     // sélectionné
    {
      name: 
      value: 
      on: [
      // Cliquer sur groupMark définit ce signal sur les valeurs du 
      // filtre
        {
          events: @groupMark:
          update: "{:datum., :datum.=='' && datum., :datum.=='stk2' && datum.}"
        }
        // Cliquer sur le bouton  ou double-cliquer n'importe où va // permettre de réinitialiser la visualition
        {
          events: [
            {
              type: 
              markname: 
            }
            {
              type: dblclick
            }
          ]
          update: ""
        }
      ]
    }
  ]
}
